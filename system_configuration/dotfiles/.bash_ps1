#
# ~/.bash_ps1
#
if [ -z "${PS1_SOURCED+x}" ]; then  # if variable PS1_SOURCED doesn't exist
  [ -z "${SHELL_DEPTH+x}" ] && export SHELL_DEPTH=0 || ((SHELL_DEPTH+=1))

  PROMPT_COMMAND='exit_status="$?"'"${PROMPT_COMMAND:+$'\n'$PROMPT_COMMAND}"

  PS1_SOURCED=true
fi


function my_ps1_configurator(){
  # List the available selections
  if [[ "$1" =~ ^-?-?h(elp)?$ ]]; then
    # Extracts the available selections by parsing the code in this file
    sed -n -r '/case "\$selection" in/,/esac/{/^\s+\([^*]+\)/s/\(|\).*//gp}' "$BASH_SOURCE"
    return
  fi

  # Set ENV variables
  [ -z "${PS1_LAYOUT+x}"    ] && export PS1_LAYOUT=''
  [ -z "${PS1_SELECTION+x}" ] && export PS1_SELECTION=''

  # Parse flags in arguments
  declare -a args=( "$@" )
  local i
  for (( i=0 ; i<"${#args[@]}" ; i++ )); do
    local arg="${args[$i]}"

    [[ ! "$arg" =~ ^- ]] && continue

    if   [[ "$arg" =~ ^(-s|--simple)$   ]]; then
      PS1_LAYOUT="simple"
    elif [[ "$arg" =~ ^(-e|--extended)$ ]]; then
      PS1_LAYOUT="extended"
    elif [[ "$arg" =~ ^(-e-o|--extended-old)$ ]]; then
      PS1_LAYOUT="extended-old"
    elif [[ "$arg" =~ ^(-a|--advanced)$ ]]; then
      PS1_LAYOUT="advanced"
    fi

    unset "args[$i]"  # Removes flag from args
  done
  declare -a args=( "${args[@]}" )
  [ ! -z "${args[0]+x}" ] && PS1_SELECTION="${args[0]}"  # if variable args[0] exists

  # Determine PS1 configuration
  if [ ! -z "$PS1_SELECTION" ]; then  # if variable PS1_SELECTION is not empty
    local selection="$PS1_SELECTION"
  elif type -P systemd-detect-virt >/dev/null && virt="$(systemd-detect-virt)" && [[ "$virt" != "none" ]]; then
    #https://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html
    local selection="$virt"
  elif [ ! -z "${container+x}" ]; then  # if environment variable container exists
    #https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash#13864829
    local selection="$container"
  else
    local selection="default" #DEFAULT
  fi

  export PS1="$(
    # Load the library
    __my_ps1_helper_library
    COLOR_INCLUDE_ESC_WRAPPERS="true"

    # Set color theme and default layout
    case "$selection" in
      ("default")
        local default_layout="simple"
        function user_color(){ am_i_root && th_red "$1" || th_green "$1"; }
        function host_color(){ th_blue "$1"; }
        function path_color(){ th_cyan "$1"; }
        ;;
      ("container" | "lxc" | "lxc-libvirt" | "docker" | "rkt" | "systemd-nspawn") #Container
        local default_layout="extended"
        function user_color(){ am_i_root && red "$1" || green "$1"; }
        function host_color(){ orange "$1"; }
        function path_color(){ cyan "$1"; }
        ;;
      ("vm" | "vps" | "qemu" | "kvm" | "uml" | "bochs" | "vmware" | "oracle") #Virtual Machine
        local default_layout="extended"
        function user_color(){ am_i_root && red "$1" || green "$1"; }
        function host_color(){ blue "$1"; }
        function path_color(){ cyan "$1"; }
        ;;
      (*)  # Unknown, gets some really funky colors
        local default_layout="extended"
        function user_color(){ am_i_root && 256color "$1" 197 || 256color "$1" 154; }
        function host_color(){ 256color "$1" 207; }
        function path_color(){ cyan "$1"; }
        ;;
    esac

    # Set layout
    [ -z "$PS1_LAYOUT" ] && local layout="$default_layout" || local layout="$PS1_LAYOUT"

    # These are code that will run everytime PS1 is printed (if they are included)
    local shell_depth='$( [ "$SHELL_DEPTH" -ne 0 ] && echo -n "$SHELL_DEPTH " )'
    local exit_code='$( [ "${exit_status:--1}" -ne 0 ] && echo -n "${exit_status:-exit status unknown. Possible corrupt \$PROMPT_COMMAND} " )'
   
    # Set layout 
    case "$layout" in
      ("simple")
        local prompt="[$(user_color '\u')@$(host_color '\h') $(white "$shell_depth")$(path_color '\W')]\\$ "
        ;;
      ("extended")
        local prompt="\n[\D{%x %X} $(white "$shell_depth")$(red "$exit_code")$(path_color '\w')]\n[$(user_color '\u')@$(host_color '\H')]\\$ "
        ;;
      ("extended-old")
        local prompt="\n\D{%x %X} [$(user_color '\u')@$(host_color '\H') $(white "$shell_depth")$(red "$exit_code")$(path_color '\w')]\n\\$ "
        ;;
      ("advanced")
        local prompt="\n[\D{%x %X} $(white "$shell_depth")$(red "$exit_code")$(path_color '\w')]\n[\!][$(user_color '\u')@$(host_color '\H')]\\$ "
        ;;
      (*)
        local prompt='\s\V\$ '
        ;;
    esac

    local title="\[\e]0;\u@\h: \w\a\]"

    echo "$title$prompt"
    #echo "$prompt"
  )"

  return
}



# prints out a table of the basic 8 colors
#https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes#answer-269085
function my_ps1_table_8colors(){(
  # Load the library
  __my_ps1_helper_library

  # Print Table
  for c in {0..7}; do
    #printf '\e[4%dm%03d' $c $c
    printf "$(color '%03d' "$c")" $c
  done
  #printf '\e[0m \n'
  echo -e "$RESET"
)}


# prints out a table of the extended 256 colors
#https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes#answer-269085
function my_ps1_table_256colors(){(
  # Load the library
  __my_ps1_helper_library

  function print_colors(){
    for c; do
      #printf '\e[48;5;%dm%03d' $c $c
      printf "$(256color '%03d' "$c")" $c
    done
    #printf '\e[0m \n'
    echo -e "$RESET"
  }

  IFS=$' \t\n'

  print_colors {0..15}  # The theme:able color range
  for ((i=0;i<6;i++)); do
    print_colors $(seq $((i*36+16)) $((i*36+51)))  # The fixed color range
  done
  print_colors {232..255}  # The grayscale color range (black to white)
)}


# prints out a table containing some of the 16 million (RGB) colors
#https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes#answer-269085
function my_ps1_table_16mcolor(){(
  # Load the library
  __my_ps1_helper_library

  #local fb="$1"
  #[[ $fb != 3 ]] && fb=4
  local samples=(0 63 127 191 255)

  for r in "${samples[@]}"; do
    for g in "${samples[@]}"; do
      for b in "${samples[@]}"; do
        #printf '\e[0;%s8;2;%s;%s;%sm%03d;%03d;%03d ' "$fb" "$r" "$g" "$b" "$r" "$g" "$b"
        printf "$(rgbcolor '%03d;%03d;%03d ' $r $g $b)" $r $g $b
      done; echo -e "$RESET" #printf '\e[m\n'
    done; echo -e -n "$RESET" #printf '\e[m'
  done; echo -e "$RESET" #printf '\e[mReset\n'
)}


# convert from RGB color (as a hexadecimal number) to nearest extended 256 color
# Ex: ff0033
#https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes#answer-269085
function my_ps1_rgb_to_256_color(){
  hex=${1#"#"}  # Remove eventual first character '#'
  if [[ ! "$hex" =~ ^[0-9A-Fa-f]+$ ]]; then
    echo >&2 "ERROR: Input must be a hexadecimal number"
    return 1
  fi
  r=$(printf '0x%0.2s' "$hex")
  g=$(printf '0x%0.2s' ${hex#??})
  b=$(printf '0x%0.2s' ${hex#????})
  printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 +  
                     (g<75?0:(g-35)/40)*6   +
                     (b<75?0:(b-35)/40)     + 16 ))"
  echo
}


# convert from extended 256 color to RGB color (as a hexadecimal number)
#https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes#answer-269085
function my_ps1_256_to_rgb_color(){
  if [[ ! "$1" =~ ^[0-9]+$ ]]; then
    echo >&2 "ERROR: Input must be an integer"
    return 1
  elif [[ "$1" > 256 ]]; then
    echo >&2 "ERROR: Input must be an integer less than 256"
    return 2
  fi
  #dec=$(($1%256))   ### input must be a number in range 0-255.
  dec="$1"
  if [ "$dec" -lt "16" ]; then
    bas=$(( dec%16 ))
    mul=128
    [ "$bas" -eq "7" ] && mul=192
    [ "$bas" -eq "8" ] && bas=7
    [ "$bas" -gt "8" ] && mul=255
    a="$((  (bas&1)    *mul ))"
    b="$(( ((bas&2)>>1)*mul ))"    
    c="$(( ((bas&4)>>2)*mul ))"
    #printf 'dec= %3s basic= #%02x%02x%02x\n' "$dec" "$a" "$b" "$c"
    printf '#%02x%02x%02x\n' "$a" "$b" "$c"
  elif [ "$dec" -gt 15 ] && [ "$dec" -lt 232 ]; then
    b=$(( (dec-16)%6  )); b=$(( b==0?0: b*40 + 55 ))
    g=$(( (dec-16)/6%6)); g=$(( g==0?0: g*40 + 55 ))
    r=$(( (dec-16)/36 )); r=$(( r==0?0: r*40 + 55 ))
    #printf 'dec= %3s color= #%02x%02x%02x\n' "$dec" "$r" "$g" "$b"
    printf '#%02x%02x%02x\n' "$r" "$g" "$b"
  else
    gray=$(( (dec-232)*10+8 ))
    #printf 'dec= %3s  gray= #%02x%02x%02x\n' "$dec" "$gray" "$gray" "$gray"
    printf '#%02x%02x%02x\n' "$gray" "$gray" "$gray"
  fi
}




function __my_ps1_helper_library(){
  ## Helper functions
  function am_i_root(){ [[ "$EUID" == "0" ]]; }

  ## Color variables
  # reset color
  RESET="\e[0m"
  # the 8 basic color codes (to use with functions 'color' or '256color')
  # NOTE: These colors are THeme:able (can be different between different terminals)
  TH_BLACK=0  ; TH_BLUE=4
  TH_RED=1    ; TH_MAGENTA=5
  TH_GREEN=2  ; TH_CYAN=6
  TH_YELLOW=3 ; TH_WHITE=7
  # the extra 8 basic color codes from the extended 256 colors (to use with function '256color')
  # NOTE: These colors are THeme:able (can be different between different terminals)
  TH_PALE_BLACK=8   ; TH_PALE_BLUE=12
  TH_PALE_RED=9     ; TH_PALE_MAGENTA=13
  TH_PALE_GREEN=10  ; TH_PALE_CYAN=14
  TH_PALE_YELLOW=11 ; TH_PALE_WHITE=15
  # misc color codes for fixed (true) colors (to use with function '256color')
  # NOTE: These colors are fixed (should always display the same regardless of terminal)
  BLACK=16   ; BLUE=27
  RED=160    ; MAGENTA=201
  GREEN=28   ; CYAN=51
  YELLOW=226 ; WHITE=231
  ORANGE=202

  ## Color functions
  # the basic 8 colors
  function color(){( #params: text, text_color, bg_color
    [ ! -z "$COLOR_INCLUDE_ESC_WRAPPERS" ] && local wb='\[' && local we='\]'
    echo -n "$wb"
    [[ "$2" =~ ^[0-9]$ ]] && echo -n "\e[3${2}m"  # Text color
    [[ "$3" =~ ^[0-9]$ ]] && echo -n "\e[4${3}m"  # BG color
    echo -n "$we"
    echo -n "$1"
    echo "${wb}${RESET}${we}"
  )}
  function th_black()  { color "$1" "$TH_BLACK"  ; }
  function th_red()    { color "$1" "$TH_RED"    ; }
  function th_green()  { color "$1" "$TH_GREEN"  ; }
  function th_yellow() { color "$1" "$TH_YELLOW" ; }
  function th_blue()   { color "$1" "$TH_BLUE"   ; }
  function th_magenta(){ color "$1" "$TH_MAGENTA"; }
  function th_cyan()   { color "$1" "$TH_CYAN"   ; }
  function th_white()  { color "$1" "$TH_WHITE"  ; }
  # the extended 256 colors
  function 256color(){ #params: text, text_color, bg_color
    [ ! -z "$COLOR_INCLUDE_ESC_WRAPPERS" ] && local wb='\[' && local we='\]'
    echo -n "$wb"
    [[ "$2" =~ ^[0-9]{1,3}$ ]] && echo -n "\e[38;5;${2}m"  # Text color
    [[ "$3" =~ ^[0-9]{1,3}$ ]] && echo -n "\e[48;5;${3}m"  # BG color
    echo -n "$we"
    echo -n "$1"
    echo "${wb}${RESET}${we}"
  }
  function th_pale_black()  { 256color "$1" "$TH_PALE_BLACK"  ; }
  function th_pale_red()    { 256color "$1" "$TH_PALE_RED"    ; }
  function th_pale_green()  { 256color "$1" "$TH_PALE_GREEN"  ; }
  function th_pale_yellow() { 256color "$1" "$TH_PALE_YELLOW" ; }
  function th_pale_blue()   { 256color "$1" "$TH_PALE_BLUE"   ; }
  function th_pale_magenta(){ 256color "$1" "$TH_PALE_MAGENTA"; }
  function th_pale_cyan()   { 256color "$1" "$TH_PALE_CYAN"   ; }
  function th_pale_white()  { 256color "$1" "$TH_PALE_WHITE"  ; }
  function black()  { 256color "$1" "$BLACK"  ; }
  function red()    { 256color "$1" "$RED"    ; }
  function green()  { 256color "$1" "$GREEN"  ; }
  function yellow() { 256color "$1" "$YELLOW" ; }
  function blue()   { 256color "$1" "$BLUE"   ; }
  function magenta(){ 256color "$1" "$MAGENTA"; }
  function cyan()   { 256color "$1" "$CYAN"   ; }
  function white()  { 256color "$1" "$WHITE"  ; }
  function orange() { 256color "$1" "$ORANGE" ; }
  # the newest 16 million colors (RGB, red green blue)
  function rgbcolor(){ #params: text, text_red, text_green, text_blue, bg_red, bg_green, bg_blue
    [ ! -z "$COLOR_INCLUDE_ESC_WRAPPERS" ] && local wb='\[' && local we='\]'
    echo -n "$wb"
    [[ "$2" =~ ^[0-9]{1,3}$ ]] && [[ "$3" =~ ^[0-9]{1,3}$ ]] && [[ "$4" =~ ^[0-9]{1,3}$ ]] && \
      echo -n "\e[0;38;2;${2};${3};${4}m"  # Text color
    [[ "$5" =~ ^[0-9]{1,3}$ ]] && [[ "$6" =~ ^[0-9]{1,3}$ ]] && [[ "$7" =~ ^[0-9]{1,3}$ ]] && \
      echo -n "\e[0;48;2;${5};${6};${7}m"  # BG color
    echo -n "$we"
    echo -n "$1"
    echo "${wb}${RESET}${we}"
  }

} #__my_ps1_helper_library() END



# This will set up your PS1
my_ps1_configurator

# Uncomment these if you don't want the functions to linger
#unset my_ps1_configurator
#unset my_ps1_table_8colors
#unset my_ps1_table_256colors
#unset my_ps1_table_16mcolor
#unset my_ps1_rgb_to_256_color
#unset my_ps1_256_to_rgb_color
#unset __my_ps1_helper_library
