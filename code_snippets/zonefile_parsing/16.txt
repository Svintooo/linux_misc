## Importera DNS-records från GENERATE-poster

dns_records_strings = [
  '$GENERATE 1-254 h109-225-98-$.wholesale.se.alltele.net. IN A 109.225.98.$'
]

ttl = 86400

domain_name = "se.alltele.net"

dns_records = []

# Konvertera till Array
dns_record_arrays = dns_records_strings.inject([]) do |array, row|
  row = row.gsub(/\s+IN\s+/, "\tIN\t")
  row = row.gsub(/\t\t+/,"\t")
  record = row.split(/\s+/)
  if record[0] =~ /^\$generate$/i
    #http://www.zytrax.com/books/dns/ch8/generate.html
    #"start-stop[/step]" => "start", "stop", "step"
    start, stop, step = record[1].split(/[-\/]/).collect{|s| s.to_i}
    step ||= 1
    # "$[{offset[,width[,type]]}]" => "$"
    record[2..-1].each{|string| string.gsub!(/[$][{][^}]*[}]/, "$")}
    #generate
    start.step(stop, step).each do |value|
      array << record[2..-1].collect{|string| string.gsub(/[$]/, value.to_s)}
    end
  else
    array << record
  end
  array
end.inject([]) do |array, record|
  if record[0] =~ /^\$origin$/i
    origin = record[1] if record[1] != "."
  elsif record[0] =~ /^\$ttl$/i
    record[0] = record[0].downcase
    array << record
  else
    record[0] = record[0].strip.gsub(/\.?$/,".#{ origin }") if record[0] != "" && !(record[0] =~ /\.$/) && !(record[0] =~ /#{ origin }$/)
    array << record
  end
  array
end ; dns_record_arrays.count



dns_record_arrays.count
dns_record_arrays.first
dns_record_arrays.last



# Parse:a datan i arrayen och spara allt i variabeln dns_records
dns_record_arrays.each{|record|
  record = record.clone
  if record[0] == "$ttl"
    ttl = record[1]
    if ttl =~ /[^0-9]/  # innehåller annat än bara siffror
      #Konvertera till sekunder
      ttl_value, ttl_format = ttl.split(/(?=[a-z])/i)  # Ex: "30M" => "30", "M"
      ttl = (ttl_value.to_i * time_conversion_table[ttl_format.downcase]).to_s
    end
    next
  end
  new_record = {}
  new_record[:domain_name] = domain_name
  new_record[:name] = record.shift.gsub(/\.$/, "")
  string = record.shift
  if string =~ /^[0-9]+$/
    new_record[:ttl] = string
    string = record.shift
  else
    new_record[:ttl] = ttl
  end
  string = record.shift if string =~ /IN/i
  if string.nil?
    puts "ERROR: File contains errors, skipping. #{file_name}"
    next
  end
  new_record[:record_type] = string.upcase
  if new_record[:record_type] =~ /mx/i
    new_record[:prio] = record.shift
  else
    new_record[:prio] = "0"
  end
  new_record[:content] = record.join(" ")
  new_record[:content] += ".#{ domain_name }" if ["CNAME","MX"].include?(new_record[:record_type]) && !(new_record[:content] =~ /\.$/)
  new_record[:content] = new_record[:content].gsub(/\.$/, "")
  dns_records << new_record
} ; dns_records.count



dns_records.count
dns_records.first
dns_records.last


domain = Domain.find_by_name(domain_name)



##########################################################
#  Öka tillåtna antalet för DNS-records (om det behövs)  #
##########################################################
p(domain.name, "DnsRecord count #{dns_records.count + domain.dns_records.count}") if dns_records.count + domain.dns_records.count > domain.hosting_plan.dns_records

old_dns_max = HostingPlan.find(1).dns_records
HostingPlan.find(1).update_attributes(:dns_records => 10_000)



#############################
#   Validera DNS-posterna   #
#############################
dns_records.all? do |record|
  raise unless domain.name == record[:domain_name]
  dns_record = domain.dns_records.new(
    :name        => record[:name       ],
    :record_type => record[:record_type],
    :content     => record[:content    ],
    :ttl         => record[:ttl        ],
    :prio        => record[:prio       ],
    :dns_record_plan_id => 1
  )
  p(dns_record, dns_record.errors.to_a) if !dns_record.valid?
  dns_record.valid?
end

dns_records.select{|o| o[:record_type] == "A" }.any? do |record|
  count = DnsRecord.where('name = ? AND record_type = ?', record[:name], record[:record_type]).count
  count > 0
end

dns_records.select{|o| o[:record_type] == "A" }.all? do |record|
  count = DnsRecord.where('name = ? AND record_type = ?', record[:name], record[:record_type]).count
  count == 0
end

dns_records.count
dns_records = dns_records.select do |record|
  0 == DnsRecord.where('name = ? AND record_type = ?', record[:name], record[:record_type]).count
end  ;  dns_records.count



##########################
#   Skapa DNS-posterna   #
##########################
i = 0
dns_record = nil
index_width = dns_records.count.to_s.length
dns_records.each do |record|
  raise if domain.name != record[:domain_name]
  begin
    dns_record = domain.dns_records.create!(
      :name        => record[:name       ],
      :record_type => record[:record_type],
      :content     => record[:content    ],
      :ttl         => record[:ttl        ],
      :prio        => record[:prio       ],
      :dns_record_plan_id => 1
    )
    i += 1
    if i % 250 == 0  # Pause
      print "#{ i.to_s.rjust(index_width) }st DNS Records created."
      gets
    end
  rescue => e
    puts
    puts e.class.name + ": " + e.message
    p record
    gets  # Pause
  end
end.count
p dns_record
p dns_record.reload


##################################################################################
#  Återställ maxantalet för DNS-records i hostingplanen (om den behövde ändras)  #
##################################################################################
HostingPlan.find(1).update_attributes(:dns_records => old_dns_max)

old_dns_max
