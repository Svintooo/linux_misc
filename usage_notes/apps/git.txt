# Config
git config --global -l
git config -l
git config --global asdf.qwer "affor6giog4of"
git config --global --unset <configname>
git config --global --edit

# Use other user
# # Manual set author
  git commit --amend --author="Name <email>" --no-edit --date=now
# # Change local user
  git config --local user.name  "Name"
  git config --local user.email "email"
  git commit --amend --reset-author --no-edit --date=now
# # Change range of commits (from specific commit to latest)
  git rebase -r <old-commit> --exec 'git commit --amend --no-edit --reset-author'
  git push origin master --force  #DANGEROUS
# # Change ALL commits
  git rebase -r --root --exec "git commit --amend --no-edit --reset-author"
  git push origin master --force  #DANGEROUS

# Change branch/files
git checkout <tree-ish> -- <pathspec>
  git checkout <branch>              # Point HEAD to branch
  git checkout -- <files>            # Revert file to branch
  git checkout <branch> -- <files>   # Checkout file from another branch, HEAD unchanged
  git checkout <commit>              # Point HEAD to specific commit, makes HEAD detached
git switch
  git switch <branch>         # Point HEAD to branch
  git switch -d <commit>      # Detach HEAD, point HEAD to commit
  git switch -c <new-branch>  # Copy HEAD to new-branch, point HEAD to new-branch
git restore
  git restore -- <file>                           # Restore file from current branch latest commit
  git restore --source <branch/commit> -- <file>  # Restore file from commit OR branch latest commit

# log
git log
git log --oneline
git log --format='%C(blue)%cd %C(yellow)%h%Creset %s' --date=format:'%Y-%m-%d'
git log --graph --decorate --pretty=oneline --abbrev-commit
git log --graph --format=format:"%C(red)%h%C(reset) %C(yellow)%ad%C(reset) %C(green)\[%an\]%C(reset) %s%C(bold blue)%d%C(reset)" --abbrev-commit --date=short
git log --pretty=format:"%h %ad \[%an\]\[%cn\] %s"  # Author and Committer

# Diff
git diff
git diff --cached  # last commit vs added files
# # Formats
  git diff --word-diff
  git diff --word-diff=color
  git diff --word-diff=color --word-diff-regex=<regex>
  git diff --color-words
  git diff --color-words='[^[:space:]]+'  # Same as above
  git diff --color-words=.
# # Algorithms
  git diff
  git diff --minimal
  git diff --patience
  git diff --histogram
# # Other output
  git diff --name-only    # Only file names
  git diff --name-status  # Only file names and file status
# # Highlight moved lines differently
  git diff --color-moved=dimmed-zebra
  git diff --color-moved=dimmed-zebra --color-moved-ws=allow-indentation-change

# See the changes in a commit
git show COMMIT

# Push to a Gerrit instance
git config --local alias.gush '! (IFS="#" && test "#${*#*#--draft#}#" != "#${*}#") && eval "set -- $(IFS='#' && echo "#$*#" | sed "s/#--draft#/#/g;s/^##$//;s/^#\|#$/\"/g;s/#/\" \"/g")" && draft="%draft" || draft="" && tracking="$(git rev-parse --symbolic-full-name --abbrev-ref @{u} 2>/dev/null)" && [ "$tracking" ] && remote="${tracking%%/*}" && branch="${tracking##*/}" && git push "$remote" "HEAD:refs/for/$branch$draft"'
git config --local alias.gush-reviewers 'gush --receive-pack="git receive-pack --reviewer me@company.com --reviewer teammate1@company.com --reviewer teammate2@company.com --reviewer teammate3@company.com"'

# Fix file moves that wasn't done with 'git mv'
git add <file>  # Add the moved files
git add -u      # Fix

# Undo a commit that has not been pushed
# # Remove file changes
git reset --hard HEAD~1
# # Keep file changes
git reset --soft HEAD~1
git restore --staged .

# misc
git reset file(s)  # Ångra en git add
git add -p [file]  # Add parts of file(s)
git clone [--bare] path/to/repo [path/where/to/create]
git tag v1.2.3
git tag -f v1.2.3  # Flytta en befintlig tag till den aktiva commit:en.
git commit --amend [-m 'message']  # Max 50 chars, max 72 chars on following lines
git push -f origin HEAD  # SUPER DANGEROUS ! ! !

# Gör om lokal git-repo till ett git-repo på git.ilait.se
root@git# git new --bare /var/git/...       # Skapar tom git-repo
git remote new origin git:/var/git/...      # Ifall repo inte har origin
git remote set-url origin git:/var/git/...  # Ifall repo redan har origin

# https://ohshitgit.com/
# https://chris.beams.io/posts/git-commit/
# https://github.com/alexkaratarakis/gitattributes

# Hämta ut filer från git som en tar-ball till stdout
git archive master [--remote=ssh://SERVER/REPO_PATH] [--prefix=FOLDER/]  # Okomprimerad tar, till stdout
git archive HEAD ...
git archive "$(hash="$(git stash create)";echo "${hash:-master}")" ... ; git gc --prune=now
git ls-files -z | xargs -0 tar c --to-stdout
