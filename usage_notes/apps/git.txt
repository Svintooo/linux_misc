# Config
git config --global -l
git config -l
git config --global asdf.qwer "affor6giog4of"
git config --global --unset <configname>
git config --global --edit

# Change branch/files
git checkout <tree-ish> -- <pathspec>
  git checkout <branch>              # Point HEAD to branch
  git checkout -- <files>            # Revert file to branch
  git checkout <branch> -- <files>   # Checkout file from another branch, HEAD unchanged
  git checkout <commit>              # Point HEAD to specific commit, makes HEAD detached
git switch
  git switch <branch>         # Point HEAD to branch
  git switch -d <commit>      # Detach HEAD, point HEAD to commit
  git switch -c <new-branch>  # Create new-branch, point HEAD to new-branch
git restore
  git restore -- <file>                           # Restore file from current branch latest commit
  git restore --source <branch/commit> -- <file>  # Restore file from commit OR branch latest commit

# log
git log
git log --oneline
git log --format='%C(blue)%cd %C(yellow)%h%Creset %s' --date=format:'%Y-%m-%d'
git log --graph --decorate --pretty=oneline --abbrev-commit

# Diff
git diff
git diff --cached  # last commit vs added files
# # Formats
  git diff --word-diff
  git diff --word-diff=color
  git diff --word-diff=color --word-diff-regex=<regex>
  git diff --color-words
  git diff --color-words='[^[:space:]]+'  # Same as above
  git diff --color-words=.
# # Algorithms
  git diff
  git diff --minimal
  git diff --patience
  git diff --histogram
# # Other output
  git diff --name-only    # Only file names
  git diff --name-status  # Only file names and file status
# # Highlight moved lines differently
  git diff --color-moved=dimmed-zebra
  git diff --color-moved=dimmed-zebra --color-moved-ws=allow-indentation-change

# See the changes in a commit
git show COMMIT

# Fix file moves that wasn't done with 'git mv'
git add <file>  # Add the moved files
git add -u      # Fix

# misc
git reset file(s)  # Ångra en git add
git add -p [file]  # Add parts of file(s)
git clone [--bare] path/to/repo [path/where/to/create]
git tag v1.2.3
git tag -f v1.2.3  # Flytta en befintlig tag till den aktiva commit:en.
git commit --amend [-m 'message']  # Max 50 chars, max 72 chars on following lines
git push -f origin HEAD  # SUPER DANGEROUS ! ! !

# Gör om lokal git-repo till ett git-repo på git.ilait.se
root@git# git new --bare /var/git/...       # Skapar tom git-repo
git remote new origin git:/var/git/...      # Ifall repo inte har origin
git remote set-url origin git:/var/git/...  # Ifall repo redan har origin

# https://ohshitgit.com/
# https://chris.beams.io/posts/git-commit/
# https://github.com/alexkaratarakis/gitattributes

# Hämta ut filer från git som en tar-ball till stdout
git archive master [--remote=ssh://SERVER/REPO_PATH] [--prefix=FOLDER/]  # Okomprimerad tar, till stdout
git archive HEAD ...
git archive "$(hash="$(git stash create)";echo "${hash:-master}")" ... ; git gc --prune=now
git ls-files -z | xargs -0 tar c --to-stdout
